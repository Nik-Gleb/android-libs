/*
 * NetworkRepositoryTest.java
 * ok-adapter
 *
 * Copyright (C) 2017, Gleb Nikitenko. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package network;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.ParcelFileDescriptor;
import android.support.annotation.Nullable;
import android.support.test.InstrumentationRegistry;
import android.support.test.runner.AndroidJUnit4;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.TimeUnit;

import ok.OkUtils;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;

/**
 * NetworkRepository Tests.
 *
 * @author Nikitenko Gleb
 * @since 1.0, 15/06/2017
 */
@RunWith(AndroidJUnit4.class)
public final class RepositoryTests {

    /** The test authority. */
    private static final String TEST_AUTHORITY = "com.test.authority";
    /** The name of test file. */
    private static final String TEST_FILE = "post.json";

    /** The {@link NetworkRepository.Builder} instance. */
    @Nullable private NetworkRepository.Builder mOkIpcManagerBuilder = null;
    /** The {@link NetworkRepository} instance. */
    @Nullable private NetworkRepository mNetworkRepository = null;

    @SuppressWarnings("WeakerAccess") public static AssetManager assetManager;

    /** @throws Exception by any fails */
    @Before public final void setUp() throws Exception
    { mOkIpcManagerBuilder = NetworkRepository.create(TEST_AUTHORITY);}
    /** @throws Exception by any fails */
    @After public final void tearDown() throws Exception
    {mOkIpcManagerBuilder = null;}

    /**
     * Test for {@link NetworkRepository#newUri()} with default path.
     * @throws Exception by some fails
     */
    @Test public final void testNewUriDefaultPath() throws Exception {

        assert mOkIpcManagerBuilder != null;
        mNetworkRepository = mOkIpcManagerBuilder.build();

        final Uri uri = new Uri.Builder().scheme("content")
            .authority(TEST_AUTHORITY).encodedPath("api").build();
        Assert.assertEquals(uri, mNetworkRepository.newUri().build());

        mNetworkRepository = null;
    }

    /**
     * Test for {@link NetworkRepository#newUri()} with custom path.
     * @throws Exception by some fails
     */
    @Test public final void testNewUriCustomPath() throws Exception {

        assert mOkIpcManagerBuilder != null;
        mNetworkRepository =
            mOkIpcManagerBuilder
                .path("custom")
                .build();

        final Uri uri = new Uri.Builder().scheme("content")
            .authority(TEST_AUTHORITY).encodedPath("custom").build();
        Assert.assertEquals(uri, mNetworkRepository.newUri().build());

        mNetworkRepository = null;
    }

    /**
     * Test for {@link NetworkRepository#newRequestBody(Bundle, String, android.os.ParcelFileDescriptor, long)}.
     * @throws Exception by some fails
     */
    @Test public final void testNewRequestBodyFile() throws Exception {
        final Context context = InstrumentationRegistry.getContext();
        if (assetManager == null) assetManager = context.getAssets();

        final AssetFileDescriptor assetFileDescriptor = assetManager.openFd(TEST_FILE);
        assert mOkIpcManagerBuilder != null;
        mNetworkRepository = mOkIpcManagerBuilder.build();


        final Bundle container = new Bundle();
        final String mediaType = "application/json";
        final long length = 462;
        mNetworkRepository.newRequestBody(container, mediaType,
            ParcelFileDescriptor.dup(assetFileDescriptor.getFileDescriptor()), length);

        final long timeOut = 1800;
        final TimeUnit timeUnit = TimeUnit.MILLISECONDS;

        final OkHttpClient okHttpClient = new OkHttpClient.Builder()
            .connectTimeout (timeOut, timeUnit).build();

        final HttpUrl httpUrl = new HttpUrl.Builder()
            .scheme("https").host("httpbin.org")
            .addPathSegment("post").build();

        //noinspection ConstantConditions
        final Request request =
            new Request.Builder()
                .url(httpUrl)
                .method("POST",
                    new OkUtils.StreamBody(MediaType.parse(mediaType),
                        new AssetFileDescriptor.AutoCloseInputStream(assetFileDescriptor),
                        length))
                .build();

        okHttpClient.newCall(request).execute().close();

        mNetworkRepository = null;

        //assetFileDescriptor.close();
    }

    /**
     * Test for {@link NetworkRepository#newRequestBody(Bundle, String, String)}.
     * @throws Exception by some fails
     */
    @Test public final void testNewRequestBodyString() throws Exception {

        assert mOkIpcManagerBuilder != null;
        mNetworkRepository = mOkIpcManagerBuilder.build();

        final Bundle container = new Bundle();
        final String mediaType = "text/plain";
        final String message = "Hello, World!";
        mNetworkRepository.newRequestBody(container, mediaType, message);

        final long timeOut = 1800;
        final TimeUnit timeUnit = TimeUnit.MILLISECONDS;

        final OkHttpClient okHttpClient = new OkHttpClient.Builder()
            .connectTimeout (timeOut, timeUnit).build();

        final HttpUrl httpUrl = new HttpUrl.Builder()
            .scheme("https").host("httpbin.org")
            .addPathSegment("post").build();

        //noinspection ConstantConditions
        final Request request =
            new Request.Builder()
                .url(httpUrl)
                .method("POST",
                    RequestBody.create(MediaType.parse(mediaType), message))
                .build();

        okHttpClient.newCall(request).execute().close();

        mNetworkRepository = null;


    }

}