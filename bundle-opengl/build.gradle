/*
 * build.gradle
 * opengl
 * 	
 * Copyright (C) 2018, Gleb Nikitenko. All Rights Reserved.
 * 	
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: 'com.android.library'


/*================== DECLARATIONS =====================*/
final PACKAGE = glebLibs
final PACKAGE_NAME = "bundle-opengl"
final boolean HAS_MAVEN =
    project.ext.mMavenWrite != null &&
        !project.ext.mMavenWrite.isEmpty()

final int SDK_VER = Integer.parseInt(sdkVer)
final KEYSTORE = System.getProperty("user.dir") + "/" + keyStoreFile
final boolean HAS_KEY_PASS =
    project.ext.mKeyPass != null &&
        !project.ext.mKeyPass.isEmpty()
/*=====================================================*/

android {
  compileSdkVersion SDK_VER
  buildToolsVersion buildToolsVer

  //noinspection GroovyMissingReturnStatement
  defaultConfig {
    minSdkVersion minSdk; targetSdkVersion SDK_VER
    dexOptions {
      javaMaxHeapSize jvmHeapSize
      maxProcessCount 8
      preDexLibraries true
      keepRuntimeAnnotatedClasses false
    }
    compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
      incremental true
    }
    consumerProguardFiles 'proguard-rules.pro'
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    releaseConfig {
      storeFile file(KEYSTORE)
      storePassword keyStorePass
      keyAlias HAS_KEY_PASS ? PACKAGE_NAME : sigKeyAlias
      keyPassword HAS_KEY_PASS ? project.ext.mKeyPass : sigKeyPassword
    }
  }

  buildTypes {
    debug {
      debuggable true; useProguard false
      shrinkResources false; minifyEnabled false
      manifestPlaceholders = [exported: false]
    }
    release {
      debuggable false; useProguard true
      // for alpha workaround
      shrinkResources false; minifyEnabled true
      manifestPlaceholders = [exported: true]
      proguardFile 'proguard-rules.pro'
      signingConfig signingConfigs.releaseConfig
    }
  }
  //testBuildType "release"
  sourceSets {
    androidTest {
      manifest.srcFile 'src/androidTest/AndroidManifest.xml'
    }
  }
}

apply plugin: 'maven-publish'
publishing {
  publications {
    maven(MavenPublication) {
      groupId PACKAGE; artifactId PACKAGE_NAME; version project.ext.mPubVer
      artifact "$buildDir/outputs/aar/${archivesBaseName}-release.aar"
    }
  }
  repositories { maven { url mMavenWrite } }
}
model {
  tasks.generatePomFileForMavenPublication { setEnabled(HAS_MAVEN) }
  tasks.publishMavenPublicationToMavenRepository {
    setEnabled(HAS_MAVEN)
  }
}; tasks.publish.setEnabled(HAS_MAVEN)
task release() {}
release.dependsOn "assembleRelease"
publish.doLast {
  final cachePath = PACKAGE + "/" + PACKAGE_NAME + "/" + project.ext.mPubVer
  delete project.ext.mGradleCachePath + gradleCacheDescr + cachePath
  delete project.ext.mGradleCachePath + gradleCacheFiles + cachePath
}

/*assembleDebugAndroidTest.doLast {

}*/

dependencies {

  /* Proguard rules */
  implementation 'com.infstory:proguard-annotations:1.0.2'
  /* Support annotations. */
  implementation 'com.android.support:support-annotations:' + supportVersion
  implementation 'com.android.support:support-core-utils:' + supportVersion
  implementation 'com.android.support:support-fragment:' + supportVersion


  testImplementation 'junit:junit:' + junitVersion
  androidTestImplementation 'com.android.support.test:runner:' + runnerVersion
  androidTestImplementation 'com.android.support.test:rules:' + runnerVersion


  /*
  implementation 'junit:junit:' + junitVersion
  implementation 'com.android.support.test:runner:' + runnerVersion
  implementation 'com.android.support.test:rules:' + runnerVersion
  */


}
apply plugin: 'com.getkeepsafe.dexcount'