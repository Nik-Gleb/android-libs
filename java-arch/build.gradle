/*
 * build.gradle
 * java-arch
 * 	
 * Copyright (C) 2018, Gleb Nikitenko. All Rights Reserved.
 * 	
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import proguard.gradle.ProGuardTask

apply plugin: 'java-library'

final PACKAGE = glebLibs
final PACKAGE_NAME = "java-arch"
final boolean HAS_MAVEN =
    project.ext.mMavenWrite != null &&
        !project.ext.mMavenWrite.isEmpty()

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

//noinspection SpellCheckingInspection
task obfuscate(type: ProGuardTask, dependsOn: 'assemble') {
  configuration 'proguard-rules.pro'
  libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
  libraryjars "${System.getProperty('java.home')}/lib/jce.jar"
  //libraryjars "../.android.jar"
  libraryjars "$buildDir/../libs/jsr305-3.0.2.jar"
  injars "$buildDir/../libs/guava-24.1-jre.jar"
  injars "$buildDir/libs/${archivesBaseName}.jar"
  outjars "$buildDir/libs/${archivesBaseName}-release.jar"
}

apply plugin: 'maven-publish'
publishing {
  publications {
    maven(MavenPublication) {
      groupId PACKAGE; artifactId PACKAGE_NAME; version project.ext.mPubVer
      artifact "$buildDir/libs/${archivesBaseName}-release.jar"
    }
  }
  repositories { maven { url mMavenWrite } }
}
model {
  tasks.generatePomFileForMavenPublication {setEnabled(HAS_MAVEN)}
  tasks.publishMavenPublicationToMavenRepository {setEnabled(HAS_MAVEN)}
}; tasks.publish.setEnabled(HAS_MAVEN)

task release() {}
release.dependsOn obfuscate

publish.doLast {
  final cachePath = PACKAGE + "/" + PACKAGE_NAME + "/" +  project.ext.mPubVer
  delete project.ext.mGradleCachePath + gradleCacheDescr + cachePath
  delete project.ext.mGradleCachePath + gradleCacheFiles + cachePath
}

repositories { jcenter(); google(); maven { url myMavenRepoReadUrl } }

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  /* JUnit */
  testImplementation 'junit:junit:' + junitVersion
  /* Optional -- Mockito framework */
  testImplementation 'org.mockito:mockito-core:2.15.0'

  /** Android dependencies */
  //implementation files('../.android.jar')
}