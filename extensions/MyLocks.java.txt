/*
 * MyLocks.java
 * java-arch
 *
 * Copyright (C) 2018, Gleb Nikitenko. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package arch.locks;

import com.google.common.util.concurrent.Striped;

import java.util.concurrent.locks.Lock;

/**
 * @author Nikitenko Gleb
 * @since 1.0, 19/03/2018
 */
@SuppressWarnings({ "WeakerAccess", "EmptyMethod", "unused" })
public final class MyLocks {

  private final Striped<Lock> striped  =  Striped.lazyWeakLock(2);

  public MyLocks() {
  }

  public void runAction(String key)
  {
    Lock lock =  striped.get(key);
    lock.lock();
    try
    {
      actionWithResource(key);
    }
    finally
    {
      lock.unlock();
    }
  }

  private void actionWithResource(Object obj)
  {
    // do something
  }
}

-dontnote com.google.common.util.concurrent.MoreExecutors
-dontnote com.google.common.base.Throwables
-dontnote com.google.common.base.internal.Finalizer

#-dontwarn com.google.common.base.**
#-keep class com.google.common.base.** {*;}

-dontwarn com.google.errorprone.annotations.**
#-keep class com.google.errorprone.annotations.** {*;}

-dontwarn com.google.j2objc.annotations.**
#-keep class com.google.j2objc.annotations.** { *; }

#-dontwarn java.lang.ClassValue
#-keep class java.lang.ClassValue { *; }

-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
#-keep class org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement { *; }

#-dontwarn sun.misc.Unsafe
#-dontwarn com.google.common.collect.MinMaxPriorityQueue


-dontwarn org.checkerframework.checker.nullness.compatqual.NullableDecl
-dontwarn org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl


#-keepclasseswithmembers public class * {
#    public static void main(java.lang.String[]);
#}
